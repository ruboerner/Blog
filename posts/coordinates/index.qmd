---
title: "Geodetic coordinate transforms with Julia"
author: "Ralph-Uwe BÃ¶rner"
date: "2022-10-26"
categories: [code, julia]
jupyter: julia-1.8
---

This blog post is about geodetic coordinate transforms using the `Julia` programming language.

In applied geophysics, the following question comes up frequently:

::: callout-important
## Problem ðŸ’»

How can I transform geographical coordinates given as "`latitude, longitude`" into some other coordinate system, e.g., UTM?
:::

The `Julia` package `Proj.jl` offers all functionality that is required.

After installing the package using `Julia`'s package manager from the REPL, we are ready to go:

```{julia}
using Proj
using DataFrames, CSV
```

Let's assume that we have downloaded a set of coordinates from a handheld GPS receiver. The content of the data file `coords.dat` may look like this:

    # lat, lon
    50.924833, 13.330562
    50.982648, 13.530406

We first read in the data:

```{julia}
df = DataFrame(CSV.File("coords.dat", delim=","))
```

Next we arrange the data such that it is suitable for processing with `Proj.jl`:

```{julia}
latlon = Array(df)
```

The following step is essential. Since we transform data from one coordinate system into another, we have to inform `Proj.jl` about the source and target systems. To this end, we exploit the convenient EPSG codes.

```{julia}
trans = Proj.Transformation("EPSG:4326", "EPSG:25833")
```

The next lines will finally transform our GPS coordinates into UTM zone 33 coordinates which we refer to as *easting* and *northing*:

```{julia}
etrs = [trans(latlon[i, :]) for i in 1:size(latlon, 1)]
UTM = hcat(collect.(etrs)...);

easting = UTM[1, :]
northing = UTM[2, :]
@show easting
@show northing;
```
