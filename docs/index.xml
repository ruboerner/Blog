<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>My Blog</title>
<link>https://ruboerner.github.io/Blog/index.html</link>
<atom:link href="https://ruboerner.github.io/Blog/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.2.269</generator>
<lastBuildDate>Thu, 01 Dec 2022 23:00:00 GMT</lastBuildDate>
<item>
  <title>What is Bayesian inference</title>
  <dc:creator>Ralph-Uwe Börner</dc:creator>
  <link>https://ruboerner.github.io/Blog/posts/Bayes/index.html</link>
  <description><![CDATA[ 




<section id="what-is-bayesian-inference" class="level1">
<h1>What is Bayesian inference?</h1>
<p>Bayesian inference is a mathematical method for estimating the values of unknown parameters based on observed data and prior knowledge or beliefs about the parameters. It is a type of statistical inference that is based on Bayes’ theorem, which is a fundamental result in probability theory.</p>
<p>The basic idea of Bayesian inference is to use Bayes’ theorem to update our beliefs or knowledge about the values of the unknown parameters based on the observed data. This is done by expressing our prior beliefs about the parameters as a probability distribution, known as the prior distribution. Then, we use Bayes’ theorem to calculate the posterior distribution, which represents our updated beliefs about the parameters based on the observed data.</p>
<p>Bayesian inference has many advantages over other methods of statistical inference. It allows us to incorporate prior knowledge or beliefs about the parameters into our analysis, which can improve the accuracy of our estimates. It also allows us to easily incorporate uncertainty and incorporate new data as it becomes available. Additionally, Bayesian inference provides a natural framework for modeling complex systems, where the relationships between the variables are often unknown or uncertain.</p>
<p>Overall, Bayesian inference is a powerful and flexible method for estimating the values of unknown parameters based on observed data and prior knowledge. It is widely used in many fields, including statistics, machine learning, and engineering, and it has many applications in data analysis and decision making.</p>
<p>Here is an example of Julia code that uses the <code>Turing.jl</code> package to perform Bayesian inference on a simple model. This code uses the Monte Carlo Markov Chain (MCMC) sampling method to estimate the values of the unknown parameters.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb1-1"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">Turing</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># Define the model</span></span>
<span id="cb1-4"><span class="pp" style="color: #AD0000;">@model</span> <span class="cf" style="color: #003B4F;">begin</span></span>
<span id="cb1-5">  <span class="co" style="color: #5E5E5E;"># Define the unknown parameters</span></span>
<span id="cb1-6">  x <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Normal</span>(<span class="fl" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">1</span>)</span>
<span id="cb1-7">  y <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Normal</span>(<span class="fl" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">1</span>)</span>
<span id="cb1-8"></span>
<span id="cb1-9">  <span class="co" style="color: #5E5E5E;"># Define the data</span></span>
<span id="cb1-10">  z <span class="op" style="color: #5E5E5E;">=</span> x <span class="op" style="color: #5E5E5E;">+</span> y</span>
<span id="cb1-11"><span class="cf" style="color: #003B4F;">end</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;"># Sample from the posterior distribution using MCMC</span></span>
<span id="cb1-14">samples <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">sample</span>(model, <span class="fu" style="color: #4758AB;">MCMC</span>(), <span class="fl" style="color: #AD0000;">1000</span>)</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;"># Print the estimated values of x and y</span></span>
<span id="cb1-17"><span class="fu" style="color: #4758AB;">println</span>(<span class="st" style="color: #20794D;">"Estimated value of x: "</span>, <span class="fu" style="color: #4758AB;">mean</span>(samples[<span class="op" style="color: #5E5E5E;">:</span>x]))</span>
<span id="cb1-18"><span class="fu" style="color: #4758AB;">println</span>(<span class="st" style="color: #20794D;">"Estimated value of y: "</span>, <span class="fu" style="color: #4758AB;">mean</span>(samples[<span class="op" style="color: #5E5E5E;">:</span>y]))</span></code></pre></div>
</div>
<p>In this code, the <code>@model</code> block defines the model that we want to fit to the data. It specifies that the unknown parameters x and y are normally distributed with mean 0 and standard deviation 1. The z variable is defined as the sum of x and y, which represents the observed data.</p>
<p>Next, the <code>sample()</code> function is used to sample from the posterior distribution of the model using MCMC. This generates a set of samples that approximate the posterior distribution, and the <code>mean()</code> function is used to estimate the mean values of x and y from the samples.</p>
<p>This simple example shows how to use the <code>Turing.jl</code> package to perform Bayesian inference on a model with unknown parameters. The same approach can be used for more complex models and data, and the <code>Turing.jl</code> package provides many advanced features for modeling and inference.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>This text has entirely been created by ChatGPT, a Large Language Model developed by openai.com.</p>
<p>Try it out at <a href="https://chat.openai.com">chat.openai.com</a>.</p>
</div>
</div>


</section>

 ]]></description>
  <category>science</category>
  <category>chatgpt</category>
  <guid>https://ruboerner.github.io/Blog/posts/Bayes/index.html</guid>
  <pubDate>Thu, 01 Dec 2022 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Geophysical inversion</title>
  <dc:creator>Ralph-Uwe Börner</dc:creator>
  <link>https://ruboerner.github.io/Blog/posts/DC_in_the_park/pygimli_inversion.html</link>
  <description><![CDATA[ 




<section id="inversion-of-dc-resistivity-data-with-pygimli" class="level1">
<h1>Inversion of DC resistivity data with <code>pyGIMLi</code></h1>
<p>The aim of the inversion is to reconstruct the spatial distribution of resistivity in the subsurface. This is based on the measured data, usually ohmic resistances <img src="https://latex.codecogs.com/png.latex?R(L)"> in <img src="https://latex.codecogs.com/png.latex?%5COmega"> or apparent resistivities <img src="https://latex.codecogs.com/png.latex?%5Crho_s(L)"> in <img src="https://latex.codecogs.com/png.latex?%5COmega%5Ccdot%20m">. All measured values depend on the location and the geoelectric electrode configuration (denoted here by <img src="https://latex.codecogs.com/png.latex?L">).</p>
<section id="installation" class="level3">
<h3 class="anchored" data-anchor-id="installation">Installation</h3>
<p>The <code>pyGIMLi</code> is a Python library. We assume that a Python environment is already installed. The easiest option is <a href="https://www.anaconda.com/products/individual"><em>anaconda</em></a>.</p>
<p>First, <code>pyGIMLi</code> must be installed so that it can be accessed under Python. This is done with <code>conda</code>:</p>
<pre class="shell"><code>conda install -c gimli -c conda-forge pygimli=1.3.0</code></pre>
</section>
<section id="preparation" class="level3">
<h3 class="anchored" data-anchor-id="preparation">Preparation</h3>
<p>We import the two libraries <code>pygimli</code> and <code>numpy</code>.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;">import</span> pygimli <span class="im" style="color: #00769E;">as</span> pg</span>
<span id="cb3-2"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb3-3"><span class="im" style="color: #00769E;">from</span> pygimli.physics <span class="im" style="color: #00769E;">import</span> ert</span>
<span id="cb3-4"><span class="im" style="color: #00769E;">from</span> pygimli.physics.ert <span class="im" style="color: #00769E;">import</span> ERTManager</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="bu" style="color: null;">print</span>(pg.__version__)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1.2.6</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code></code></pre>
</div>
</div>
</section>
</section>
<section id="the-data-format" class="level1">
<h1>The data format</h1>
<p><code>pyGIMLi</code> expects the measured data in a special file format, the <em>Unified Data Format</em> <a href="https://gitlab.com/resistivity-net/bert#the-unified-data-format">(description on the project page of BERT)</a>. These are ASCII files, which can be edited with all common text editors.</p>
<p>Such a measured value file contains the following sections: - Number of electrodes as well as coordinates (position and height) of the electrodes with implicit numbering - Number of measured values as well as the data resulting in each case from the combination of two to four electrodes.</p>
<p>The example shows a small data set with 6 electrodes and 6 single measurements in the configuration <em>Dipole-Dipole</em> (recognizable by the order <em>a b m n</em> of the electrodes and probes). The 5th column of the data block contains the apparent resistivity (<code>rhoa</code>) in <img src="https://latex.codecogs.com/png.latex?%5COmega%5Ccdot%20m">.</p>
<pre class="text"><code>6# Number of electrodes
# x z position for each electrode
0     0
1     0
2     0 # loose ground
3     0
4     0
5     0
6# Number of data
# a b m n rhoa
1   2   3   4  231.2
2   3   4   5  256.7
3   4   5   6  312.8 
1   2   4   5  12.1 # possibly an outlier
2   3   5   6  199.7
1   2   5   6  246.2</code></pre>
<section id="inversion-of-a-field-data-set" class="level2">
<h2 class="anchored" data-anchor-id="inversion-of-a-field-data-set">Inversion of a field data set</h2>
<section id="background" class="level3">
<h3 class="anchored" data-anchor-id="background">Background</h3>
<p>For this example, we use data from a measurement above the piped stream “Goldbach” in the center of Freiberg.</p>
<p>The Goldbach, also known as the Saubach, is an approximately 5 km long left tributary of the Münzbach in Freiberg.</p>
<p>Its entire course is located in the territory of the city of Freiberg. The headwaters are located between the Großer Teich and the Mittelteich ponds or around these ponds in the Freiberg city forest at an altitude of about 460 meters. After passing the Mittelteich, it flows about 300 m to the northwest and then turns almost 90° to the northeast. Parallel to the Ölmühlenweg it reaches the development boundary of the city of Freiberg. Here, at the level of the Schützenhaus on Chemnitzer Straße, it enters a piped section about 400 m long, which ends at the Mühlteich. After flowing through the Mühlteich, after about 200 m it reaches the Hammerteich with the former Freibergsdorfer Hammerwerk, to which it supplied the service water at that time. After another 800 m it is again piped. After flowing through the Kreuzteiche and the Schlüsselteich, it reaches the Münzbach in the Freiberg district of Loßnitz after about 5 km in a piped condition, having meanwhile turned to a more northerly direction.</p>
</section>
<section id="dc-resistivity-profile-setup" class="level3">
<h3 class="anchored" data-anchor-id="dc-resistivity-profile-setup">DC resistivity profile setup</h3>
<p>The profile measurement was carried out with the <em>Wenner</em>, and <em>Dipole-Dipole</em> configurations using 21 electrodes.</p>
<p>The dipole-dipole data set consists of 80 individual measurements, and the Wenner data set consists of 63 individual measurements. All data is stored in the file <code>parkall.mea</code>.</p>
<p>The Python object <code>wenner</code> contains all measured data:</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">wenner <span class="op" style="color: #5E5E5E;">=</span> pg.load(<span class="st" style="color: #20794D;">"parkall.mea"</span>)</span>
<span id="cb8-2"><span class="bu" style="color: null;">print</span>(wenner)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Data: Sensors: 21 data: 143, nonzero entries: ['a', 'b', 'm', 'n', 'rhoa', 'valid']</code></pre>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">wenner[<span class="st" style="color: #20794D;">'k'</span>] <span class="op" style="color: #5E5E5E;">=</span> ert.createGeometricFactors(wenner, numerical<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</div>
<p>In the <code>pyGIMLi</code> method <code>ERTManager()</code> all functions for the inversion of geoelectric data (<em>Electrical Resistivity Tomography</em>, ERT) are implemented.</p>
<p>The object <code>ertwenner</code> will hold, among others, the model response and the model parameters.</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">ertwenner <span class="op" style="color: #5E5E5E;">=</span> ERTManager()</span></code></pre></div>
</div>
<p>Since our data set does not contain measurement errors, we estimate plausible absolute and relative data errors. Absolute errors are given in <img src="https://latex.codecogs.com/png.latex?%5COmega%5Ccdot%20m">.</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">wenner[<span class="st" style="color: #20794D;">'err'</span>] <span class="op" style="color: #5E5E5E;">=</span> ertwenner.estimateError(wenner, absoluteError<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>, relativeError<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.03</span>)</span></code></pre></div>
</div>
<p>The following figure shows <em>pseudosections</em> of the <strong>apparent resistivity</strong> <img src="https://latex.codecogs.com/png.latex?%5Crho_s">. The trapezoidal shape comes from the arbitrary choice of the horizontal reference point in the profile plot for the Wenner or dipole-dipole arrangement. The ordinates in the following two figures represent the electrode spacing for Wenner (WE) and the separation between current pole and voltage dipoles for the dipole-dipole (DD) array. <strong>Note: The vertical axis is not a depth axis!</strong></p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">ertwenner.showData(wenner, cMap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"RdBu_r"</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://ruboerner.github.io/Blog/posts/DC_in_the_park/pygimli_inversion_files/figure-html/cell-9-output-1.png" width="596" height="431"></p>
</div>
</div>
</section>
<section id="data-inversion" class="level3">
<h3 class="anchored" data-anchor-id="data-inversion">Data inversion</h3>
<p>The method <code>ert.invert</code> performs the inversion of the data (<code>data</code>) for a specified regularization parameter <img src="https://latex.codecogs.com/png.latex?%5Clambda"> (<code>lam=10</code>) and a maximum model depth of <code>paraDepth=10</code> meters and a maximum triangular size of the finite elements of <code>paraMaxCellSize=1</code> <img src="https://latex.codecogs.com/png.latex?m%5E2">.</p>
<p>The results of the inversion calculation – the distribution of resistivity in the subsurface and the model response – are stored in the object <code>mod</code>.</p>
<p>The <code>lam</code> parameter is assigned the value of the selected <em>regularization parameter</em> <img src="https://latex.codecogs.com/png.latex?%5Clambda">.</p>
<p>If the value of <img src="https://latex.codecogs.com/png.latex?%5Clambda"> is too low, a singularity of the least squares problem, if present, is expressed by strongly fluctuating values in the resistivity distribution in the subsurface. In the opposite case, if <img src="https://latex.codecogs.com/png.latex?%5Clambda"> is too large, the resistivity distribution becomes very smooth.</p>
<p>Here we can try out what influence the regularization parameter has on the solution of our problem.</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">lam <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">modwenner <span class="op" style="color: #5E5E5E;">=</span> ertwenner.invert(wenner, lam<span class="op" style="color: #5E5E5E;">=</span>lam, paraMaxCellSize<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>, paraDepth<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">6</span>, verbose<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</div>
<p>The following figures illustrate the relationship between the model parameters (<img src="https://latex.codecogs.com/png.latex?%5Crho(%5Cmathbf%20r)">) and the measured apparent resistivity (<code>Data</code>) and the model response (<code>Response</code>).</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">ertwenner.showResultAndFit(cMap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"RdBu_r"</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://ruboerner.github.io/Blog/posts/DC_in_the_park/pygimli_inversion_files/figure-html/cell-12-output-1.png" width="659" height="469"></p>
</div>
</div>
<p>The Goldbach flows in a concrete pipe at about profile meter 12.</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">ertwenner.showModel(modwenner, cMap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"RdBu_r"</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://ruboerner.github.io/Blog/posts/DC_in_the_park/pygimli_inversion_files/figure-html/cell-13-output-1.png" width="586" height="264"></p>
</div>
</div>
<p>Of interest is the goodness of fit, which we refer to as <em>misfit</em>. This is the relative error between data and model response. A graphical representation of this error is informative:</p>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">misfitwe <span class="op" style="color: #5E5E5E;">=</span> ertwenner.inv.response <span class="op" style="color: #5E5E5E;">/</span> wenner[<span class="st" style="color: #20794D;">'rhoa'</span>] <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb18-2">me <span class="op" style="color: #5E5E5E;">=</span> np.<span class="bu" style="color: null;">max</span>(np.<span class="bu" style="color: null;">abs</span>(misfitwe))</span>
<span id="cb18-3">pg.show(wenner, misfitwe, cMap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"RdBu_r"</span>, cMin<span class="op" style="color: #5E5E5E;">=-</span>me, cMax<span class="op" style="color: #5E5E5E;">=</span>me, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"misfit (%)"</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://ruboerner.github.io/Blog/posts/DC_in_the_park/pygimli_inversion_files/figure-html/cell-14-output-1.png" width="599" height="429"></p>
</div>
</div>
<p>The global misfit is described with the <img src="https://latex.codecogs.com/png.latex?%5Cchi%5E2">-statistic and amounts to</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">ertwenner.inv.chi2()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="172">
<pre><code>0.8469349648613855</code></pre>
</div>
</div>
</section>
</section>
<section id="discussion" class="level2">
<h2 class="anchored" data-anchor-id="discussion">Discussion</h2>
<p>We have seen that the inversion result can be influenced by the choice of different parameters. Especially the data fitting and model properties are affected.</p>
<ul>
<li>Which parameter controls the roughness of the model?</li>
</ul>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>python</category>
  <category>geophysics</category>
  <guid>https://ruboerner.github.io/Blog/posts/DC_in_the_park/pygimli_inversion.html</guid>
  <pubDate>Wed, 23 Nov 2022 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Geodetic coordinate transforms with Julia</title>
  <dc:creator>Ralph-Uwe Börner</dc:creator>
  <link>https://ruboerner.github.io/Blog/posts/coordinates/index.html</link>
  <description><![CDATA[ 




<p>This blog post is about geodetic coordinate transforms using the <code>Julia</code> programming language.</p>
<p>In applied geophysics, the following question comes up frequently:</p>
<div class="callout-important callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Problem 💻
</div>
</div>
<div class="callout-body-container callout-body">
<p>How can I transform geographical coordinates given as “<code>latitude, longitude</code>” into some other coordinate system, e.g., UTM?</p>
</div>
</div>
<p>The <code>Julia</code> package <code>Proj.jl</code> offers all functionality that is required.</p>
<p>After installing the package using <code>Julia</code>’s package manager from the REPL, we are ready to go:</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb1-1"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">Proj</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">DataFrames</span>, <span class="bu" style="color: null;">CSV</span></span></code></pre></div>
</div>
<p>Let’s assume that we have downloaded a set of coordinates from a handheld GPS receiver. The content of the data file <code>coords.dat</code> may look like this:</p>
<pre class="shell"><code># lat, lon
50.924833, 13.330562
50.982648, 13.530406</code></pre>
<p>We first read in the data:</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb3-1">df <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">DataFrame</span>(CSV.<span class="fu" style="color: #4758AB;">File</span>(<span class="st" style="color: #20794D;">"coords.dat"</span>, delim<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">","</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">

<div class="data-frame"><p>2 rows × 2 columns</p><table class="data-frame table table-sm table-striped"><thead><tr><th></th><th># lat</th><th> lon</th></tr><tr><th></th><th title="Float64">Float64</th><th title="Float64">Float64</th></tr></thead><tbody><tr><th>1</th><td>50.9248</td><td>13.3306</td></tr><tr><th>2</th><td>50.9826</td><td>13.5304</td></tr></tbody></table></div>
</div>
</div>
<p>Next we arrange the data such that it is suitable for processing with <code>Proj.jl</code>:</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb4-1">latlon <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">Array</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>2×2 Matrix{Float64}:
 50.9248  13.3306
 50.9826  13.5304</code></pre>
</div>
</div>
<p>The following step is essential. Since we transform data from one coordinate system into another, we have to inform <code>Proj.jl</code> about the source and target systems. To this end, we exploit the convenient EPSG codes.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb6-1">trans <span class="op" style="color: #5E5E5E;">=</span> Proj.<span class="fu" style="color: #4758AB;">Transformation</span>(<span class="st" style="color: #20794D;">"EPSG:4326"</span>, <span class="st" style="color: #20794D;">"EPSG:25833"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>Transformation
    source: WGS 84
    target: ETRS89 / UTM zone 33N
    direction: forward</code></pre>
</div>
</div>
<p>The next lines will finally transform our GPS coordinates into UTM zone 33 coordinates which we refer to as <em>easting</em> and <em>northing</em>:</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb8-1">etrs <span class="op" style="color: #5E5E5E;">=</span> [<span class="fu" style="color: #4758AB;">trans</span>(latlon[i, <span class="op" style="color: #5E5E5E;">:</span>]) for i <span class="kw" style="color: #003B4F;">in</span> <span class="fl" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">:</span><span class="fu" style="color: #4758AB;">size</span>(latlon, <span class="fl" style="color: #AD0000;">1</span>)]</span>
<span id="cb8-2">UTM <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">hcat</span>(<span class="fu" style="color: #4758AB;">collect</span>.(etrs)<span class="op" style="color: #5E5E5E;">...</span>);</span>
<span id="cb8-3"></span>
<span id="cb8-4">easting <span class="op" style="color: #5E5E5E;">=</span> UTM[<span class="fl" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">:</span>]</span>
<span id="cb8-5">northing <span class="op" style="color: #5E5E5E;">=</span> UTM[<span class="fl" style="color: #AD0000;">2</span>, <span class="op" style="color: #5E5E5E;">:</span>]</span>
<span id="cb8-6"><span class="pp" style="color: #AD0000;">@show</span> easting</span>
<span id="cb8-7"><span class="pp" style="color: #AD0000;">@show</span> northing;</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>easting = [382670.42457542894, 396843.0546304857]
northing = [5.642793241297958e6, 5.648923257065746e6]</code></pre>
</div>
</div>



 ]]></description>
  <category>code</category>
  <category>julia</category>
  <guid>https://ruboerner.github.io/Blog/posts/coordinates/index.html</guid>
  <pubDate>Tue, 25 Oct 2022 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Post With Code</title>
  <dc:creator>Ralph-Uwe Börner</dc:creator>
  <link>https://ruboerner.github.io/Blog/posts/post-with-code/index.html</link>
  <description><![CDATA[ 




<p>This is a post with executable code.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb1-1"><span class="fl" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">1</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>2</code></pre>
</div>
</div>
<p><img src="https://latex.codecogs.com/png.latex?%5Calpha"> math rendering works quite well.</p>



 ]]></description>
  <category>news</category>
  <category>code</category>
  <category>julia</category>
  <guid>https://ruboerner.github.io/Blog/posts/post-with-code/index.html</guid>
  <pubDate>Thu, 29 Sep 2022 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Welcome to my Blog</title>
  <dc:creator>Ralph-Uwe Börner</dc:creator>
  <link>https://ruboerner.github.io/Blog/posts/welcome/index.html</link>
  <description><![CDATA[ 




<section id="welcome" class="level1">
<h1>Welcome!</h1>
<p>This is the first post in a Quarto blog.</p>
<section id="why-quarto" class="level2">
<h2 class="anchored" data-anchor-id="why-quarto">Why Quarto?</h2>
<p>Recently, I discovered <a href="http://quarto.org">Quarto</a>, which offers a functionality that I was missing in other tools.</p>
<p></p><div id="tweet-84591"></div><script>tweet={"url":"https:\/\/twitter.com\/ruboerner\/status\/1576608085971533826","author_name":"Ralph-Uwe Börner","author_url":"https:\/\/twitter.com\/ruboerner","html":"\u003Cblockquote class=\"twitter-tweet\" align=\"center\"\u003E\u003Cp lang=\"en\" dir=\"ltr\"\u003E. \u003Ca href=\"https:\/\/twitter.com\/quarto_pub?ref_src=twsrc%5Etfw\"\u003E@quarto_pub\u003C\/a\u003E is the discovery of the year when it comes to providing lecture material. \u003Ca href=\"https:\/\/twitter.com\/hashtag\/quartopub?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#quartopub\u003C\/a\u003E\u003C\/p\u003E&mdash; Ralph-Uwe Börner (@ruboerner) \u003Ca href=\"https:\/\/twitter.com\/ruboerner\/status\/1576608085971533826?ref_src=twsrc%5Etfw\"\u003EOctober 2, 2022\u003C\/a\u003E\u003C\/blockquote\u003E\n\u003Cscript async src=\"https:\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"\u003E\u003C\/script\u003E\n","width":550,"height":null,"type":"rich","cache_age":"3153600000","provider_name":"Twitter","provider_url":"https:\/\/twitter.com","version":"1.0"};document.getElementById("tweet-84591").innerHTML = tweet["html"];</script><p></p>
</section>
<section id="what-is-quarto" class="level2">
<h2 class="anchored" data-anchor-id="what-is-quarto">What is Quarto?</h2>
<p>First and foremost, using Quarto one can easily deploy a website, a blog post, a presentation, a static html page, or you name it.</p>
<p>This blog is a Quarto project which I edit in <a href="http://www.rstudio.com">RStudio</a>.</p>
<p>Its sources are hosted at <a href="http://github.com/ruboerner/Blog">GitHub</a> and deployed as a static site using GitHub Pages.</p>


</section>
</section>

 ]]></description>
  <category>quarto</category>
  <guid>https://ruboerner.github.io/Blog/posts/welcome/index.html</guid>
  <pubDate>Thu, 29 Sep 2022 22:00:00 GMT</pubDate>
  <media:content url="https://ruboerner.github.io/Blog/posts/welcome/quarto.png" medium="image" type="image/png" height="44" width="144"/>
</item>
<item>
  <title>Quarto and Julia</title>
  <dc:creator>Ralph-Uwe Börner</dc:creator>
  <link>https://ruboerner.github.io/Blog/posts/Julia-and-Quarto/index.html</link>
  <description><![CDATA[ 




<section id="why-mix-julia-and-quarto" class="level1">
<h1>Why mix Julia and Quarto?</h1>
<p>There are quite a few development environments available for Julia, e.g., <a href="https://code.visualstudio.com">Visual Studio Code</a>, <a href="https://jupyter.org">Jupyter</a>, <a href="https://github.com/fonsp/Pluto.jl">Pluto.jl</a>.</p>
<p>All of the above can be used to develop code or implement and test ideas. The main difference is the intended workflow.</p>
<p>For the purpose of teaching, until now I prefer Pluto.jl notebooks.</p>
<p>However, even though exporting the final Pluto Notebook is possible without problems, the design of the exported HTML or PDF page cannot be altered. Further, there is no straightforward way to easily deploy a slide show presentation directly out of your notebook.</p>
<p>There exist, however, <em>literate programming</em> tools that are able to generate, e.g., a tutorial or a documentation by parsing comments in the Julia source files — see, e.g.,</p>
<ul>
<li>Documenter.jl</li>
<li>Literate.jl</li>
<li>Franklin.jl</li>
<li>Publish.jl</li>
<li>Weave.jl.</li>
</ul>
<p>Further, <em>Jupyter notebooks</em> are web-based interactive computational environments for creating notebook documents. It contains an ordered list of input and output cells which can contain code, Markdown text, plots, and equations.</p>


</section>

 ]]></description>
  <category>code</category>
  <category>julia</category>
  <guid>https://ruboerner.github.io/Blog/posts/Julia-and-Quarto/index.html</guid>
  <pubDate>Thu, 29 Sep 2022 22:00:00 GMT</pubDate>
  <media:content url="https://ruboerner.github.io/Blog/posts/Julia-and-Quarto/Logo.png" medium="image" type="image/png" height="90" width="144"/>
</item>
<item>
  <title>Jupyter example</title>
  <dc:creator>Ralph-Uwe Börner</dc:creator>
  <link>https://ruboerner.github.io/Blog/posts/jupyter/index.html</link>
  <description><![CDATA[ 




<section id="use-jupyter-notebooks-as-quarto-blog-posts" class="level1">
<h1>Use Jupyter notebooks as Quarto blog posts</h1>
<p>This blog post has been entirely written within a Jupyter Notebook.</p>
<p>You can use existing Jupyter notebooks as blog entries with just a little modification!</p>
<p>Quarto can only render Jupyter notebooks properly when you add a YAML header as first cell of your notebook. Just make sure, that this cell is a <em>raw cell</em>.</p>
<p>Further, I have renamed the notebook to <code>index.ipynb</code> – though I’m not sure if this is really necessary. This assumption probably fits well with the conventional <code>index.html</code> files sitting in the other blog post folders.</p>
<p>The YAML front matter of this notebook looks like this:</p>
<pre><code>---
title: "Jupyter example"
categories: [code, jupyter, quarto]
jupyter: "julia-1.8"
---</code></pre>
<p>The remaining cells are just plain Jupyter code cells.</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb2-1"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">Plots</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">theme</span>(<span class="op" style="color: #5E5E5E;">:</span>vibrant)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb3-1">x <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">range</span>(<span class="fl" style="color: #AD0000;">0.0</span>, <span class="fl" style="color: #AD0000;">2</span>π, <span class="fl" style="color: #AD0000;">101</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>0.0:0.06283185307179587:6.283185307179586</code></pre>
</div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb5-1"><span class="fu" style="color: #4758AB;">plot</span>(x, <span class="fu" style="color: #4758AB;">sin</span>.(x), label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"sin(x)"</span>, xlabel<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"x"</span>, ylabel<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"y(x)"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<p><img src="https://ruboerner.github.io/Blog/posts/jupyter/index_files/figure-html/cell-4-output-1.svg" class="img-fluid"></p>
</div>
</div>


</section>

 ]]></description>
  <category>code</category>
  <category>jupyter</category>
  <category>quarto</category>
  <guid>https://ruboerner.github.io/Blog/posts/jupyter/index.html</guid>
  <pubDate>Wed, 28 Sep 2022 22:00:00 GMT</pubDate>
  <media:content url="https://ruboerner.github.io/Blog/posts/jupyter/main-logo.png" medium="image" type="image/png" height="43" width="144"/>
</item>
</channel>
</rss>
