[
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "1 + 1\n\n2\n\n\n\\(\\alpha\\) math rendering works quite well."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome to my Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog.\n\n\nRecently, I discovered Quarto, which offers a functionality that I was missing in other tools.\n\n\n\n\nFirst and foremost, using Quarto one can easily deploy a website, a blog post, a presentation, a static html page, or you name it.\nThis blog is a Quarto project which I edit in RStudio.\nIts sources are hosted at GitHub and deployed as a static site using GitHub Pages."
  },
  {
    "objectID": "posts/welcome/index.html#what-is-quarto",
    "href": "posts/welcome/index.html#what-is-quarto",
    "title": "Welcome to my Blog",
    "section": "What is Quarto?",
    "text": "What is Quarto?\nFirst and foremost, using Quarto one can easily deploy a website, a blog post, a presentation, a static html page, or you name it.\nThis blog is a Quarto project which I edit in RStudio.\nIts sources are hosted at GitHub and deployed as a static site using GitHub Pages."
  },
  {
    "objectID": "posts/Julia-and-Quarto/index.html",
    "href": "posts/Julia-and-Quarto/index.html",
    "title": "Quarto and Julia",
    "section": "",
    "text": "There are quite a few development environments available for Julia, e.g., Visual Studio Code, Jupyter, Pluto.jl.\nAll of the above can be used to develop code or implement and test ideas. The main difference is the intended workflow.\nFor the purpose of teaching, until now I prefer Pluto.jl notebooks.\nHowever, even though exporting the final Pluto Notebook is possible without problems, the design of the exported HTML or PDF page cannot be altered. Further, there is no straightforward way to easily deploy a slide show presentation directly out of your notebook.\nThere exist, however, literate programming tools that are able to generate, e.g., a tutorial or a documentation by parsing comments in the Julia source files ‚Äî see, e.g.,\n\nDocumenter.jl\nLiterate.jl\nFranklin.jl\nPublish.jl\nWeave.jl.\n\nFurther, Jupyter notebooks are web-based interactive computational environments for creating notebook documents. It contains an ordered list of input and output cells which can contain code, Markdown text, plots, and equations."
  },
  {
    "objectID": "posts/jupyter/index.html",
    "href": "posts/jupyter/index.html",
    "title": "Jupyter example",
    "section": "",
    "text": "This blog post has been entirely written within a Jupyter Notebook.\nYou can use existing Jupyter notebooks as blog entries with just a little modification!\nQuarto can only render Jupyter notebooks properly when you add a YAML header as first cell of your notebook. Just make sure, that this cell is a raw cell.\nFurther, I have renamed the notebook to index.ipynb ‚Äì though I‚Äôm not sure if this is really necessary. This assumption probably fits well with the conventional index.html files sitting in the other blog post folders.\nThe YAML front matter of this notebook looks like this:\n---\ntitle: \"Jupyter example\"\ncategories: [code, jupyter, quarto]\njupyter: \"julia-1.8\"\n---\nThe remaining cells are just plain Jupyter code cells.\n\nusing Plots\ntheme(:vibrant)\n\n\nx = range(0.0, 2œÄ, 101)\n\n0.0:0.06283185307179587:6.283185307179586\n\n\n\nplot(x, sin.(x), label=\"sin(x)\", xlabel=\"x\", ylabel=\"y(x)\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to my blog",
    "section": "",
    "text": "Coordinate transformations\n\n\n\n\n\n\n\ncode\n\n\njulia\n\n\n\n\n\n\n\n\n\n\n\nOct 26, 2022\n\n\nRalph-Uwe B√∂rner\n\n\n\n\n\n\n  \n\n\n\n\nQuarto and Julia\n\n\n\n\n\n\n\ncode\n\n\njulia\n\n\n\n\n\n\n\n\n\n\n\nSep 30, 2022\n\n\nRalph-Uwe B√∂rner\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\njulia\n\n\n\n\n\n\n\n\n\n\n\nSep 30, 2022\n\n\nRalph-Uwe B√∂rner\n\n\n\n\n\n\n  \n\n\n\n\nWelcome to my Blog\n\n\n\n\n\n\n\nquarto\n\n\n\n\n\n\n\n\n\n\n\nSep 30, 2022\n\n\nRalph-Uwe B√∂rner\n\n\n\n\n\n\n  \n\n\n\n\nJupyter example\n\n\n\n\n\n\n\ncode\n\n\njupyter\n\n\nquarto\n\n\n\n\n\n\n\n\n\n\n\nSep 29, 2022\n\n\nRalph-Uwe B√∂rner\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "My name is Ralph-Uwe B√∂rner.\nI teach geophysics at the Technische Universit√§t Bergakademie Freiberg.\nMy research interests are:\n\nTheory of electromagnetic methods in geophysics\nPotential theory and its applications in geophysics\nNumerical simulation of Maxwell‚Äôs equations\nMATLAB and Julia"
  },
  {
    "objectID": "posts/coordinates/index.html",
    "href": "posts/coordinates/index.html",
    "title": "Coordinate transformations",
    "section": "",
    "text": "This post is about geodetic coordinate transformations.\nThe following question comes up frequently:\n\n\n\n\n\n\nProblem üíª\n\n\n\nHow can I transform coordinates given as ‚Äúlatitude, longitude‚Äù into some other coordinate system, say UTM?\n\n\nThe Julia package Proj.jl offers all functionality that is required.\nAfter installing the package using Julia‚Äôs package manager from the REPL, we are ready to go:\n\nusing Proj\nusing DataFrames, CSV\n\nLet‚Äôs assume that we have downloaded a set of coordinates from a handheld GPS receiver. The content of the data file coords.dat may look like this:\n# lat, lon\n50.92483350345329, 13.33056291517176\nWe first read in the data:\n\ndf = DataFrame(CSV.File(\"coords.dat\", delim=\",\"))\n\n\n2 rows √ó 2 columns# lat lonFloat64Float64150.924813.3306250.982613.5304\n\n\nNext we arrange the data such that it is suitable for processing with Proj.jl:\n\nlatlon = Array(df)\n\n2√ó2 Matrix{Float64}:\n 50.9248  13.3306\n 50.9826  13.5304\n\n\nThe following step is essential. Since we transform data from one coordinate system into another, we have to inform Proj.jl about the source and target systems. To this end, we exploit the convenient EPSG codes.\n\ntrans = Proj.Transformation(\"EPSG:4326\", \"EPSG:25833\")\n\nTransformation\n    source: WGS 84\n    target: ETRS89 / UTM zone 33N\n    direction: forward\n\n\nThe next lines will transform our coordinates into UTM zone 33:\n\netrs = [trans(latlon[i, :]) for i in 1:size(latlon, 1)]\nUTM = hcat(collect.(etrs)...);\n\neasting = UTM[1, :]\nnorthing = UTM[2, :]\n@show easting\n@show northing;\n\neasting = [382670.4901574054, 396843.0546304857]\nnorthing = [5.64279329582307e6, 5.648923257065746e6]"
  }
]